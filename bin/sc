#!/usr/bin/env python

import argparse
import shutil
import sys
import os
import actions


def do_view(args):
    if args.html:
        args.pdf = False

    file = actions.find(args.file)
    if args.pdf:
        actions.view(file)

def do_create(args):
    filename = actions.create(args.file)
    if filename != None:
        print(filename)
        actions.edit(filename)

def do_find(args):
    filename = actions.find(args.file)
    if filename != None:
        print(filename)

def do_find_all(args):
    filename = actions.find(args.file,otherSearchPaths=True)
    if filename != None:
        print(filename)

def do_edit(args):
    file = actions.find(args.file, filterMarkdown=True)
    actions.edit(file)

def do_copy(args):
    name,extension = os.path.splitext(os.path.basename(args.file))
    fullfilepath = actions.generateFilename(name,extension=extension)
    shutil.copyfile(args.file, fullfilepath)

def do_move(args):
    name,extension = os.path.splitext(os.path.basename(args.file))
    fullfilepath = actions.generateFilename(name,extension=extension)
    shutil.move(args.file, fullfilepath)

def do_grep(args):
    output = actions.grep(args.file)
    for o in output:
        print(o)



def set_default_subparser(self, name, args=None):
    """default subparser selection. Call after setup, just before parse_args()
    name: is the name of the subparser to call by default
    args: if set is the argument list handed to parse_args()

    , tested with 2.7, 3.2, 3.3, 3.4
    it works with 2.6 assuming argparse is installed
    """
    subparser_found = False
    for arg in sys.argv[1:]:
        if arg in ['-h', '--help']:  # global help if no subparser
            break
    else:
        for x in self._subparsers._actions:
            if not isinstance(x, argparse._SubParsersAction):
                continue
            for sp_name in x._name_parser_map.keys():
                if sp_name in sys.argv[1:]:
                    subparser_found = True
        if not subparser_found:
            # insert default in first position, this implies no
            # global options without a sub_parsers specified
            if args is None:
                sys.argv.insert(1, name)
            else:
                args.insert(0, name)

argparse.ArgumentParser.set_default_subparser = set_default_subparser

parser = argparse.ArgumentParser()
parser_subparsers = parser.add_subparsers()

parser_view = parser_subparsers.add_parser(
        'view',
        help="views a file found by fuzzy search",
        aliases=['v']
        )
parser_view.set_defaults(func=do_view)
parser_view.add_argument(
        'file',
        help="the file name to view given by a fuzzy search",
        action="store")

group_view = parser_view.add_mutually_exclusive_group()
group_view.add_argument(
        '--html',
        action="store_true",
        help="produces a HTML file and views it in the browser",
        default=False
        )
group_view.add_argument(
        '--pdf',
        action="store_true",
        help="produces a PDF file and views it in mupdf (default)",
        default=True
        )

parser_create = parser_subparsers.add_parser(
        'create',
        help="creates a file and opens it for edit",
        aliases=['c','cr']
        )
parser_create.set_defaults(func=do_create)
parser_create.add_argument('file',action="store")

parser_edit = parser_subparsers.add_parser(
        'edit',
        help="opens a file for edit given by a fuzzy search",
        aliases=['e']
        )
parser_edit.set_defaults(func=do_edit)
parser_edit.add_argument('file',action="store")

parser_find = parser_subparsers.add_parser(
        'find',
        help="finds a file using fuzzy search on the file name",
        aliases=['f']
        )
parser_find.set_defaults(func=do_find)
parser_find.add_argument('file',action="store")

parser_find_all = parser_subparsers.add_parser(
        'findall',
        help="finds a file using fuzzy search on the file name including the searchpaths",
        aliases=['fa']
        )
parser_find_all.set_defaults(func=do_find_all)
parser_find_all.add_argument('file',action="store")

parser_grep = parser_subparsers.add_parser(
        'grep',
        help="greps files",
        aliases=['g']
        )
parser_grep.set_defaults(func=do_grep)
parser_grep.add_argument('file',action="store")

parser_copy = parser_subparsers.add_parser(
        'copy',
        help="copys a file to the directory",
        aliases=['cp']
        )
parser_copy.set_defaults(func=do_copy)
parser_copy.add_argument('file',action="store")

parser_move = parser_subparsers.add_parser(
        'move',
        help="moves a file to the directory",
        aliases=['mv']
        )
parser_move.set_defaults(func=do_move)
parser_move.add_argument('file',action="store")

parser.set_default_subparser('view')
parsed_args = parser.parse_args()

if hasattr(parsed_args, 'func'):
    parsed_args.func(parsed_args)
